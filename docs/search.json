[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Overview",
    "section": "",
    "text": "In research, a significant amount of effort is spent cleaning data to get it ready for visualisation and analysis. This course will teach you how to convert your messy dataset into tidy data using R for easy data visual exploration and analysis.\nFor this, you will be introduced to the concept of tidy data, and guided through the programmatic steps in R required to structure datasets according to its principles. Additionally, we will show how tidy data works well together with graphical functions of the R package {ggplot2} thus facilitating initial exploration and analysis of the data. Finally, a “bring-your-own-data day” (optional day 3) will allow a smaller group of participants to obtain individual feedback and consulting on how to tidy up and visually inspect their own research datasets."
  },
  {
    "objectID": "about.html#programme",
    "href": "about.html#programme",
    "title": "Overview",
    "section": "Programme",
    "text": "Programme\n\nDay 1 | Introduction to data wrangling\n\nRaw and processed data\nComponents of tidy data\nMessy datasets\nConverting messy data to tidy data using tidyverse packages\nHands-on exercises.\n\n\n\nDay 2 | Visualising tidy data using ggplot2\n\nUnderstanding how tidy data translates to graphics’ aesthestics\nPlotting with one geom\nCombining several geoms\nTheming\nSaving graphs\nHands-on exercises.\n\n\n\nDay 3 | Bring your own data day\nIndividual consulting for data wrangling and visual exploration."
  },
  {
    "objectID": "data_visualisation.html",
    "href": "data_visualisation.html",
    "title": "Data visualisation",
    "section": "",
    "text": "Before we start with our day on Data Visualisation, create a new R script file named data-visualisation.R in the folder R/. This will be the file containing the R code related to Data Visualisation.\nIn this tutorial you’ll learn:\n\nHow to map variables in tidy data sets to visual attributes of graphics, called aesthetics in {ggplot2}.\nHow to make different plot types by using different “geometries”, called geoms in {ggplot2}.\nHow to tweak the style of your plots.\nHow to export your plots to files (JPEG, PNG, PDF or SVG).\nHow to make article figures by combining several plots together using the {patchwork} package."
  },
  {
    "objectID": "data_visualisation.html#the-crabs-and-quadrats-data-sets",
    "href": "data_visualisation.html#the-crabs-and-quadrats-data-sets",
    "title": "Data visualisation",
    "section": "The crabs and quadrats data sets",
    "text": "The crabs and quadrats data sets\n\nExercise 3.1\n\nStart by loading required packages: {tidyverse}, {here} and {patchwork}. Note that the {tidyverse} package already includes the {ggplot2} package.\nRead in the two tidy data sets generated yesterday: crabs and quadrats. Use the function readRDS() to read the respective .rds files from the folder data-tidy/.\n\n\n\nSolution to Exercise 3.1\nlibrary(tidyverse)\nlibrary(here)\nlibrary(patchwork)\n\ndata_tidy_path <- here::here(\"data-tidy\")\nquadrats <- readRDS(file = file.path(data_tidy_path, \"quadrats.rds\"))\ncrabs <- readRDS(file = file.path(data_tidy_path, \"crabs.rds\"))"
  },
  {
    "objectID": "data_visualisation.html#mapping-variables-to-aesthetics-aes",
    "href": "data_visualisation.html#mapping-variables-to-aesthetics-aes",
    "title": "Data visualisation",
    "section": "Mapping variables to aesthetics (aes)",
    "text": "Mapping variables to aesthetics (aes)\nThe basic recipe for creating a {ggplot2} plot:\n\nYou provide the data (typically a tidy data set).\nYou indicate how to map variables to aesthetics.\nYou indicate what geoms to use.\n\nAnd ggplot does the rest for you. We will now explore these three steps while trying to answer some basic questions about the fiddler crabs.\n\nExercise 3.2\nWhat is the most abundant crab species? Make a simple bar chart showing the number of individuals per species.\nUse dplyr::count() to determine the number of crabs identified in each species. The result should look like:\n\n\n# A tibble: 3 × 2\n  species               n\n  <fct>             <int>\n1 Afruca farensis    2520\n2 Uca olhanensis     3740\n3 Ucides alvorensis  1066\n\n\n\n\nSolution to Exercise 3.2\nnr_crabs_by_species <- count(crabs, species)\nggplot(data = nr_crabs_by_species, mapping = aes(x = species, y = n)) +\n  geom_col()\n\n\n\n\n\n\n\nExplanation of solution 3.2\nNote how the categorical variable species has been mapped onto the x-axis, and the number of crabs n to the y-axis.\nTo perform the mapping we used the function aes() and then passed the result to the mapping parameter of the function ggplot(). We can pry on what kind of information aes() is generating by evaluating it here in isolation:\n\naes(x = species, y = n)\n\nAesthetic mapping: \n* `x` -> `species`\n* `y` -> `n`\n\n\nAlso note that the observational unit of the data set nr_crabs_by_species is now the species, not an individual crab as we had in the case of the crabs data set. So we have three observations (each species), and each one corresponds to one bar in the plot.\n\n\nExercise 3.3\nWhat are the abundances of each sex?\n\n\nSolution to Exercise 3.3\nnr_crabs_by_sex <- count(crabs, sex)\nggplot(data = nr_crabs_by_sex, mapping = aes(x = sex, y = n)) +\n  geom_col()\n\n\n\n\n\nOkay, so you’ve re-mapped the x-axis to the sex variable in the nr_crabs_by_sex data set.\n\n\nExercise 3.4\nCan you visually show the crab abundance by species and sex in the same plot? If you look at the plot, what does it tell you about how easy it might be to distinguish female and male crabs across species in the field?\n\nTip: pay attention to the number of NA values in each species.\n\nTo determine the number of crabs by species and sex, just use dplyr::count() to count the number of crabs and ask for the combination of values for species and sex:\n\ndplyr::count(crabs, species, sex)\n\n# A tibble: 8 × 3\n  species           sex        n\n  <fct>             <fct>  <int>\n1 Afruca farensis   female  1219\n2 Afruca farensis   male    1223\n3 Afruca farensis   <NA>      78\n4 Uca olhanensis    female  1758\n5 Uca olhanensis    male    1834\n6 Uca olhanensis    <NA>     148\n7 Ucides alvorensis female   533\n8 Ucides alvorensis male     533\n\n\nAnd now we can make a new bar plot with the following mappings:\n\nspecies maps to bars’ x-position.\nsex maps to fill colour of the bars (the fill aesthetic).\nn maps to number of crabs, as usual.\n\n\n\nSolution to Exercise 3.4\nnr_crabs_by_sp_sex <- count(crabs, species, sex)\nggplot(data = nr_crabs_by_sp_sex, mapping = aes(x = species, y = n, fill = sex)) +\n  geom_col()\n\n\n\n\n\nNice! We got a stacked bar plot. sex is now mapped on the fill colour in the bar plot. Here are variations (V1-V5) on how we could tweak the width and positioning of the bars regarding the sex variable.\n\nV1V2V3V4V5\n\n\n\nnr_crabs_by_sp_sex %>%\n  ggplot(mapping = aes(x = species, y = n, fill = sex)) +\n  geom_col(position = \"dodge\")\n\n\n\n\n\n\n\nnr_crabs_by_sp_sex %>%\n  ggplot(mapping = aes(x = species, y = n, fill = sex)) +\n  geom_col(position = \"dodge2\")\n\n\n\n\n\n\n\nnr_crabs_by_sp_sex %>%\n  ggplot(mapping = aes(x = species, y = n, fill = sex)) +\n  geom_col(position = position_dodge2(preserve = \"single\"))\n\n\n\n\n\n\n\nnr_crabs_by_sp_sex %>%\n  tidyr::complete(species, sex) %>%\n  ggplot(mapping = aes(x = species, y = n, fill = sex)) +\n  geom_col(position = position_dodge2(preserve = \"single\"))\n\nWarning: Removed 1 rows containing missing values (geom_col).\n\n\n\n\n\n\n\n\nnr_crabs_by_sp_sex %>%\n  tidyr::complete(species, sex, fill = list(n = 0)) %>%\n  ggplot(mapping = aes(x = species, y = n, fill = sex)) +\n  geom_col(position = position_dodge2(preserve = \"single\"))\n\n\n\n\n\n\n\n\n\nExercise 3.5\nThe latest plots were showing three variables:\n\nspecies on the x-axis\nsex as fill colour\nn on the y-axis\n\nLet us see how far we may go by mapping more variables to other aesthetics. Besides the variables species and sex, stage (crab developmental stage) is also an important demographics’ variable. Let us add too to the mix. There is an aesthetic called colour that adjust the colour of the bar outline.\nSo, try to make a new plot where, in addition, the colour aesthetic is mapped to stage.\n\n\nSolution to Exercise 3.5\ncount(crabs, species, sex, stage) %>%\n  ggplot(mapping = aes(x = species, y = n, fill = sex, colour = stage)) +\n  geom_col(position = \"dodge2\")\n\n\n\n\n\nWhat an ugly plot! Perhaps trying to fit too many variables into one single plot may not be such a great idea.\n\n\nExercise 3.6\nThere is one powerful technique to improve readability of your plots. If one plot is not enough, make several! This can be achieved with faceting. Faceting is the process of creating several related plots, each in their own facet (panel).\nHere is an example of three facets, one for each species:\n\ncount(crabs, species, stage) %>%\n  ggplot(mapping = aes(x = stage, y = n)) +\n  geom_col(position = \"dodge2\") +\n  facet_wrap(vars(species))\n\n\n\n\nNow, try to make the ugly plot again, but now using only three aesthetic mappings while leaving the species to be varied across facets:\n\n\nSolution to Exercise 3.6\nggplot(data = count(crabs, species, sex, stage), mapping = aes(x = sex, y = n, fill = stage)) +\n  geom_col(position = position_dodge2(preserve = \"single\")) +\n  facet_wrap(vars(species))\n\n\n\n\n\nHooray! Four variables shown in not such a complicated way. But we can do better…\n\n\nExercise 3.7\nLet us draw five variables: species, sex, stage, season and n. We can use faceting in 2D: rows and columns. Take a look at the solution below.\n\n\nSolution to Exercise 3.7\ncount(crabs, species, sex, stage, season) %>%\nggplot(mapping = aes(x = sex, y = n, fill = stage)) +\n  geom_col(position = position_dodge2(preserve = \"single\")) +\n  facet_grid(rows = vars(season), cols = vars(species))"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Finally, ensure that you have the following packages installed by running:\ninstall.packages(c(\"tidyverse\", \"here\", \"readxl\", \"ggbeeswarm\", \"patchwork\"))\nYou can now move on to the next section Raw Data. You have a link at the bottom right of this page."
  },
  {
    "objectID": "slides-data-tidying.html#team",
    "href": "slides-data-tidying.html#team",
    "title": "Data Tidying",
    "section": "Team",
    "text": "Team"
  },
  {
    "objectID": "slides-data-tidying.html#programme",
    "href": "slides-data-tidying.html#programme",
    "title": "Data Tidying",
    "section": "Programme",
    "text": "Programme\n\nDay 1 – Data tidying\nDay 2 – Data visualisation\nDay 3 – Consulting\n\nMornings @ 09h00–12h00\nAfternoons @ 14h00–17h00 (+1h)"
  },
  {
    "objectID": "slides-data-tidying.html#what-is-data",
    "href": "slides-data-tidying.html#what-is-data",
    "title": "Data Tidying",
    "section": "What is data?",
    "text": "What is data?\n\n\n“Data are values of qualitative or quantitative variables, belonging to a set of items.”"
  },
  {
    "objectID": "slides-data-tidying.html#key-concepts-behind-data",
    "href": "slides-data-tidying.html#key-concepts-behind-data",
    "title": "Data Tidying",
    "section": "Key concepts behind data",
    "text": "Key concepts behind data\n\n\nValues\nVariables\nItems"
  },
  {
    "objectID": "slides-data-tidying.html#section",
    "href": "slides-data-tidying.html#section",
    "title": "Data Tidying",
    "section": "",
    "text": "Female\nMale\n\n\n\n\nPregnant\n10\n0\n\n\nNot pregnant\n42\n38"
  },
  {
    "objectID": "slides-data-tidying.html#section-1",
    "href": "slides-data-tidying.html#section-1",
    "title": "Data Tidying",
    "section": "",
    "text": "Pregnant\nNot pregnant\n\n\n\n\nFemale\n10\n42\n\n\nMale\n0\n38"
  },
  {
    "objectID": "slides-data-tidying.html#section-2",
    "href": "slides-data-tidying.html#section-2",
    "title": "Data Tidying",
    "section": "",
    "text": "Sex\nPregnancy status\nn\n\n\n\n\nFemale\nNot pregnant\n42\n\n\nFemale\nPregnant\n10\n\n\nMale\nNot pregnant\n38\n\n\nMale\nPregnant\n0"
  },
  {
    "objectID": "slides-data-tidying.html#data-structure-heterogeneity",
    "href": "slides-data-tidying.html#data-structure-heterogeneity",
    "title": "Data Tidying",
    "section": "Data structure heterogeneity",
    "text": "Data structure heterogeneity"
  },
  {
    "objectID": "slides-data-tidying.html#tidy-data",
    "href": "slides-data-tidying.html#tidy-data",
    "title": "Data Tidying",
    "section": "Tidy data",
    "text": "Tidy data"
  },
  {
    "objectID": "slides-data-tidying.html#tidy-data-principles",
    "href": "slides-data-tidying.html#tidy-data-principles",
    "title": "Data Tidying",
    "section": "Tidy data principles",
    "text": "Tidy data principles"
  },
  {
    "objectID": "slides-data-tidying.html#tidy-data-workbench",
    "href": "slides-data-tidying.html#tidy-data-workbench",
    "title": "Data Tidying",
    "section": "Tidy data workbench",
    "text": "Tidy data workbench"
  },
  {
    "objectID": "slides-data-tidying.html#data-analysis-workflow",
    "href": "slides-data-tidying.html#data-analysis-workflow",
    "title": "Data Tidying",
    "section": "Data analysis workflow",
    "text": "Data analysis workflow"
  },
  {
    "objectID": "slides-data-tidying.html#tidyverse-workflow",
    "href": "slides-data-tidying.html#tidyverse-workflow",
    "title": "Data Tidying",
    "section": "Tidyverse workflow",
    "text": "Tidyverse workflow"
  },
  {
    "objectID": "slides-data-tidying.html#fiddler-crabs",
    "href": "slides-data-tidying.html#fiddler-crabs",
    "title": "Data Tidying",
    "section": "Fiddler crabs",
    "text": "Fiddler crabs"
  },
  {
    "objectID": "slides-data-tidying.html#location",
    "href": "slides-data-tidying.html#location",
    "title": "Data Tidying",
    "section": "Location",
    "text": "Location"
  },
  {
    "objectID": "slides-data-tidying.html#experimental-design",
    "href": "slides-data-tidying.html#experimental-design",
    "title": "Data Tidying",
    "section": "Experimental design",
    "text": "Experimental design\n\nAt two locations: Ria Formosa and Ria de Alvor\nIn the Summer and in the Winter\nTwo quadrats\nVariables? You will find out."
  },
  {
    "objectID": "slides-data-tidying.html#online-tutorial",
    "href": "slides-data-tidying.html#online-tutorial",
    "title": "Data Tidying",
    "section": "Online tutorial",
    "text": "Online tutorial\nrmagno.eu/tdvr.oct.22\n\n\nTidy Data and Visualisation with R, 2022"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tidy Data & Visualisation with R",
    "section": "",
    "text": "The course consists of two days, and an extra optional day of consulting with students’ own data. In the first day you will learn the fundamental ideas behind tidy data and how to use Tidyverse functionality to turn your messy data into tidy data. In the second day you’ll learn how to use {ggplot2} functions to turn your tidy dataset into charts and figures.\nTo follow the course narrative browse the sections indicated on the left side bar of this website and do the exercises indicated.\nThis training is designed to be an in-person course, but the course materials are provided for free, in the open, for the benefit of the community. If you use these materials please give the credit: DOIXXX CC BY SA."
  },
  {
    "objectID": "raw_data.html",
    "href": "raw_data.html",
    "title": "Raw data",
    "section": "",
    "text": "First acquaintances\nStart by loading the following required packages:\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(tools)\nlibrary(readxl)\n\nGet a variable with the path to the directory containing the raw data files:\n\ndata_raw_path <- here(\"data-raw\")\ndata_raw_path\n\n[1] \"/home/rmagno/sci/code/R/web/tdvr.oct.22/data-raw\"\n\n\nNote that the path up to data-raw/ is different from the one shown here. This is the job of the function here(): automatically determines the path of your data-raw directory. Now list the files in data-raw/:\n\nlist.files(data_raw_path)\n\n[1] \"data-raw.zip\"      \"quadrats.xlsx\"     \"rf_s_q1.csv\"      \n[4] \"rf_s_q2.csv\"       \"rf_w_q1.csv\"       \"rf_w_q2.csv\"      \n[7] \"Ria de Alvor.xlsx\"\n\n\nThere are four CSV files (rf_s_q1.csv, rf_s_q2.csv, rf_w_q1.csv, rf_w_q2.csv) and two Excel files (quadrats.xlsx, Ria de Alvor.xlsx). The CSV files contain data on the fiddler crabs sampled during the four field trips to Ria Formosa. The analogous data for Ria de Alvor is provided in the Excel file Ria de Alvor.xlsx. The file quadrats.xlsx contains the area for each of quadrats defined in both Ria Formosa and Ria de Alvor.\nUse Excel to visually inspect the data in Ria de Alvor.xlsx, in one of the CSV files of your choice, and in quadrats.xlsx. Take some quick notes of:\n\nHow many data sets are there?\nWhat is the observational unit in each data set?\nWhat are the variables? Are the variable names used consistently across the data sets from Ria Formosa (CSV files) and Ria de Alvor (Ria de Alvor.xlsx)?\nBy looking at the values of the variables can you tell the type of variable? I.e., is it categorical/nominal, ordinal, binary, or continuous? Are there invalid or unexpected values?\n\n\n\nExercise 1.1\nCollect the previous commands into your R script data-tidying.R.\n\n\nSolution to Exercise 1.1\nlibrary(tidyverse)\nlibrary(here)\nlibrary(tools)\nlibrary(readxl)\n\n# Define the path to the raw data\ndata_raw_path <- here(\"data-raw\")\n\n# List the raw data files\nlist.files(data_raw_path)\n\n\n\n\nProgrammatic acquaintances\nWe will now read the data into R, and try to answer the same questions but using R code. Here’s how you may read one of the CSV files using the read_csv() function:\n\nrf_s_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q1.csv\"))\n\nAnd here is how you read the quadrats.xlsx into R:\n\nquadrats01 <- readxl::read_excel(file.path(data_raw_path, \"quadrats.xlsx\"))\n\n\n\nExercise 1.2\nFollowing those examples can you read all six files into R? Note that Ria de Alvor.xlsx will be trickier because it contains several sheets.\n\n\nSolution to Exercise 1.2\n# Reading the four CSV files (Ria Formosa)\nrf_s_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q1.csv\"))\nrf_s_q2 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q2.csv\"))\nrf_w_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_w_q1.csv\"))\nrf_w_q2 <- readr::read_csv(file.path(data_raw_path, \"rf_w_q2.csv\"))\n\n# Reading now the four sheets inside of \"Ria de Alvor.xlsx\"\nra_path <- file.path(data_raw_path, \"Ria de Alvor.xlsx\")\nra_s_q1 <- readxl::read_excel(ra_path, sheet = \"summer-q1\")\nra_s_q2 <- readxl::read_excel(ra_path, sheet = \"summer-q2\")\nra_w_q1 <- readxl::read_excel(ra_path, sheet = \"winter-q1\")\nra_w_q2 <- readxl::read_excel(ra_path, sheet = \"winter-q2\")\n\n# Finally, reading the details about the quadrats\nquadrats01 <- readxl::read_excel(file.path(data_raw_path, \"quadrats.xlsx\"))\n\n\n\n\nExercise 1.3\nTo inspect the data just loaded into R we may try the following functions on those objects:\n\nView()\ndplyr::glimpse()\ncolnames()\nnrow() and ncol()\nhead() and tail()\nsummary() and table()\nunique()\n\nHere are a few examples:\n\n# Print each column as a row and indicate the column name,\n# followed by its type, and the first values:\ndplyr::glimpse(rf_s_q1)\n\n# Column names of the data frame `rf_s_q1`:\ncolnames(rf_s_q1)\n\n# Create a contingency table of the column `stage`:\ntable(rf_s_q1$stage)\n\n# Show me the unique values present in the `sex` column:\nunique(rf_s_q1$sex)\n\nWrite down as comments in your script file data-tidying.R the insights you gained about the data:\n\n\nSolution to Exercise 1.3\n# Insights gained: to be discussed with trainers."
  },
  {
    "objectID": "requirements.html",
    "href": "requirements.html",
    "title": "Requirements",
    "section": "",
    "text": "Bring your own laptop computer with R and RStudio installed.\nHave a basic understanding of R programming. If you need to brush up on your R skills, a hands-on R introductory tutorial will be made available for self-learning so that you can get familiarized with basic R before the course."
  },
  {
    "objectID": "data_tidying.html#introduction",
    "href": "data_tidying.html#introduction",
    "title": "Data tidying",
    "section": "Introduction",
    "text": "Introduction\nWe will now embark on a series of data transformations to convert our nine data sets into only two tidy data sets:\n\ncrabs\nquadrats\n\nSo bear these two data sets in mind as these are our end goal for the Data Tidying workflow of today. As we proceed transforming our data frames we will keep variables that hold the intermediate steps. For example, early on in our workflow today, we will have a crabs01 data set. This is a messy data set. Then you will transform it a bit into crabs02, etc.. At the very end we will assign the last stage of our crabs data set to the variable crabs. The same pattern will be followed for quadrats, although this data set involves fewer steps.\nFrom the previous section Raw Data you should have generated these nine data sets that are now our starting point:\n\nRia Formosa\n\nrf_s_q1\nrf_s_q2\nrf_w_q1\nrf_w_q2\n\nRia de Alvor\n\nra_s_q1\nra_s_q2\nra_w_q1\nra_w_q2\n\nQuadrats\n\nquadrats01\n\n\nOkay, so now we are ready to start fixing the various aspects of messiness associated with our data sets."
  },
  {
    "objectID": "data_tidying.html#add-missing-columns",
    "href": "data_tidying.html#add-missing-columns",
    "title": "Data tidying",
    "section": "Add missing columns",
    "text": "Add missing columns\nCurrently, the fiddler crabs data is missing three variables:\n\nregion\nseason\nquadrat\n\nThese variables were surreptitiously present in the names of the CSV files and in the name of the XLSX and included sheets.\n\nAn an example, the file rf_s_q1.csv, whose data has been read into rf_s_q1, indicates in its name that crab sampling was performed in Ria Formosa (\"rf\"), in the Summer (\"s\"), in quadrat 1 (\"q1\").\n\n\nExercise 2.1\nUse the function dplyr::mutate() to add the three missing columns, and respective values, to each of the eight data frames:\n\nRia Formosa\n\nrf_s_q1\nrf_s_q2\nrf_w_q1\nrf_w_q2\n\nRia de Alvor\n\nra_s_q1\nra_s_q2\nra_w_q1\nra_w_q2\n\n\nHere is an example for the data set rf_s_q1:\n\n# Add the columns `region`, `season` and `quadrat`.\nrf_s_q1_01 <- dplyr::mutate(rf_s_q1, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q1\")\n\n# Check the result.\ndplyr::glimpse(rf_s_q1_01)\n\nRows: 1,243\nColumns: 15\n$ cl        <dbl> 21, 21, 15, 21, 19, 17, 19, 14, 19, 19, 17, 20, 22, 15, 17, …\n$ lcl       <dbl> 16, 13, 9, 16, 8, 7, 14, 13, 10, 12, 8, 16, 13, 9, 8, 19, 13…\n$ fw        <dbl> 15, 16, 10, 19, 14, 15, 15, 8, 11, 19, 8, 18, 15, 11, 13, 15…\n$ species   <chr> \"A. farensis\", \"A. farensis\", \"A. farensis\", \"A. farensis\", …\n$ longitude <dbl> -8.01873, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ is_gravid <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE,…\n$ rcl       <dbl> 10, 15, 5, 14, 7, 6, 9, 5, 10, 12, 13, 15, 11, 10, 6, 16, 12…\n$ stage     <chr> \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", …\n$ sex       <chr> \"?\", \"?\", \"female\", \"male or female\", \"female\", \"female\", \"f…\n$ id        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ cw        <dbl> 27, 27, 19, 26, 24, 22, 25, 18, 24, 24, 21, 25, 27, 19, 22, …\n$ latitude  <dbl> 37.02606, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ region    <chr> \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", …\n$ season    <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", …\n$ quadrat   <chr> \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", …\n\n\n\n\nSolution to Exercise 2.1\n# Ria Formosa data sets\nrf_s_q1_01 <- dplyr::mutate(rf_s_q1, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q1\")\nrf_s_q2_01 <- dplyr::mutate(rf_s_q2, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q2\")\nrf_w_q1_01 <- dplyr::mutate(rf_w_q1, region = \"Ria Formosa\", season = \"winter\", quadrat = \"q1\")\nrf_w_q2_01 <- dplyr::mutate(rf_w_q2, region = \"Ria Formosa\", season = \"winter\", quadrat = \"q2\")\n\n# Ria de Alvor data sets\nra_s_q1_01 <- dplyr::mutate(ra_s_q1, region = \"Ria de Alvor\", season = \"summer\", quadrat = \"q1\")\nra_s_q2_01 <- dplyr::mutate(ra_s_q2, region = \"Ria de Alvor\", season = \"summer\", quadrat = \"q2\")\nra_w_q1_01 <- dplyr::mutate(ra_w_q1, region = \"Ria de Alvor\", season = \"winter\", quadrat = \"q1\")\nra_w_q2_01 <- dplyr::mutate(ra_w_q2, region = \"Ria de Alvor\", season = \"winter\", quadrat = \"q2\")"
  },
  {
    "objectID": "data_tidying.html#make-variable-column-names-consistent-across-data-sets",
    "href": "data_tidying.html#make-variable-column-names-consistent-across-data-sets",
    "title": "Data tidying",
    "section": "Make variable (column) names consistent across data sets",
    "text": "Make variable (column) names consistent across data sets\nOkay, now that we have all variables in our data sets, we will need to bind all data sets into one. But before we do that we will need to make sure that the variables (i.e. columns) across the eight data sets are all named in the same way. Otherwise, the step of combining the data sets will be cumbersome. We want it to be smooth. You’ll see in a bit what we mean.\nWe can tell you that there are discrepancies between the data sets coming from Ria Formosa and Ria de Alvor. This is because the two teams of marine biologists had different ideas on how to name two of the variables.\nAlso, the two teams had abbreviated the name of the morphological variables, and we find them hard to read, so we will rename them to new names as indicated in this table:\n\n\n\n\n\n\n\n\nCurrent name\nNew name\nMeaning\n\n\n\n\ncw\ncarapace_width\nCarapace width\n\n\ncl\ncarapace_length\nCarapace length\n\n\nfw\nfront_width\nFront width (distance between the crab eye stalks)\n\n\nlcl\nleft_claw_length\nLeft claw length\n\n\nrcl\nright_claw_length\nRight claw length\n\n\n\n\nExercise 2.2\n\nIdentify the two columns that have slightly different names between the Ria Formosa and the Ria de Alvor data sets.\nRename those two columns in the Ria de Alvor data sets (ra_s_q1_01, ra_s_q2_01, ra_w_q1_01 and ra_w_q2_01) to match the names used in Ria Formosa.\nRename the abbreviated column names to new, more explicit, names, as indicated in the table above. Do this for all data sets.\nName these new data sets as: rf_s_q1_02, rf_s_q2_02, etc. and ra_s_q1_02, ra_s_q2_02, etc..\n\nUse the function dplyr::rename() for renaming. Here is an example:\n\nrf_s_q1_02 <- dplyr::rename(rf_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\n\ndplyr::glimpse(rf_s_q1_02)\n\nRows: 1,243\nColumns: 15\n$ carapace_length   <dbl> 21, 21, 15, 21, 19, 17, 19, 14, 19, 19, 17, 20, 22, …\n$ left_claw_length  <dbl> 16, 13, 9, 16, 8, 7, 14, 13, 10, 12, 8, 16, 13, 9, 8…\n$ front_width       <dbl> 15, 16, 10, 19, 14, 15, 15, 8, 11, 19, 8, 18, 15, 11…\n$ species           <chr> \"A. farensis\", \"A. farensis\", \"A. farensis\", \"A. far…\n$ longitude         <dbl> -8.01873, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ is_gravid         <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ right_claw_length <dbl> 10, 15, 5, 14, 7, 6, 9, 5, 10, 12, 13, 15, 11, 10, 6…\n$ stage             <chr> \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", \"juv…\n$ sex               <chr> \"?\", \"?\", \"female\", \"male or female\", \"female\", \"fem…\n$ id                <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ carapace_width    <dbl> 27, 27, 19, 26, 24, 22, 25, 18, 24, 24, 21, 25, 27, …\n$ latitude          <dbl> 37.02606, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ region            <chr> \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", \"Ria Fo…\n$ season            <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"s…\n$ quadrat           <chr> \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\"…\n\n\n\n\nSolution to Exercise 2.2\n# What column names are there in Ria de Alvor and not in Ria Formosa?\nsetdiff(colnames(ra_s_q1_01), colnames(rf_s_q1_01))\n\n# And now the reverse question.\nsetdiff(colnames(rf_s_q1_01), colnames(ra_s_q1_01))\n\n# So it seems Ria de Alvor data sets have named the `species` column as\n# `species_name`, and `is_gravid?` contains a question mark. \n# Let us fix by mapping:\n#  - `species_name` to `species`\n#  - `is_gravid?` to `is_gravid`\n# And also, do not forget to map the abbreviated column names to their full\n# names.\n\n\n# Note how the mapping of the names is indicated in `rename()`:\n# New names go in the left hand side of the equal sign and old names in\n# the right hand side.\n# \n# Ria Formosa data sets\nrf_s_q1_02 <- dplyr::rename(rf_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_s_q2_02 <- dplyr::rename(rf_s_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_w_q1_02 <- dplyr::rename(rf_w_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_w_q2_02 <- dplyr::rename(rf_w_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\n\n# Ria de Alvor data sets\nra_s_q1_02 <- dplyr::rename(ra_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_s_q2_02 <- dplyr::rename(ra_s_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_w_q1_02 <- dplyr::rename(ra_w_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_w_q2_02 <- dplyr::rename(ra_w_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)"
  },
  {
    "objectID": "data_tidying.html#combining-the-crabs-data-sets-into-one",
    "href": "data_tidying.html#combining-the-crabs-data-sets-into-one",
    "title": "Data tidying",
    "section": "Combining the crabs data sets into one",
    "text": "Combining the crabs data sets into one\nNow we will combine all the eight data sets into one single data frame. To do that we use the function dplyr::bind_rows(). And although the columns are not by the same order in all data sets, bind_rows() is smart enough to match each column of one data set to that of another. It does this by using the column names. And that is why it was so important harmonise the column names across data sets.\n\nExercise 2.3\nBind all the eight data sets into one named crabs01. Note the number of rows and columns of this new data set.\n\n\nSolution to Exercise 2.3\ncrabs01 <-\n  dplyr::bind_rows(\n    rf_s_q1_02,\n    rf_s_q2_02,\n    rf_w_q1_02,\n    rf_w_q2_02,\n    ra_s_q1_02,\n    ra_s_q2_02,\n    ra_w_q1_02,\n    ra_w_q2_02\n  )\n\n\nHere is how the crabs01 should look like:\n\ncrabs01\n\n# A tibble: 7,326 × 15\n   carapace_…¹ left_…² front…³ species longi…⁴ is_gr…⁵ right…⁶ stage sex      id\n         <dbl>   <dbl>   <dbl> <chr>     <dbl> <lgl>     <dbl> <chr> <chr> <dbl>\n 1          21      16      15 A. far…   -8.02 FALSE        10 juve… ?         1\n 2          21      13      16 A. far…   NA    FALSE        15 juve… ?         2\n 3          15       9      10 A. far…   NA    TRUE          5 juve… fema…     3\n 4          21      16      19 A. far…   NA    FALSE        14 juve… male…     4\n 5          19       8      14 A. far…   NA    FALSE         7 juve… fema…     5\n 6          17       7      15 A. far…   NA    FALSE         6 juve… fema…     6\n 7          19      14      15 A. far…   NA    FALSE         9 juve… fema…     7\n 8          14      13       8 A. far…   NA    FALSE         5 juve… fema…     8\n 9          19      10      11 A. far…   NA    TRUE         10 juve… fema…     9\n10          19      12      19 A. far…   NA    FALSE        12 juve… fema…    10\n# … with 7,316 more rows, 5 more variables: carapace_width <dbl>,\n#   latitude <dbl>, region <chr>, season <chr>, quadrat <chr>, and abbreviated\n#   variable names ¹​carapace_length, ²​left_claw_length, ³​front_width,\n#   ⁴​longitude, ⁵​is_gravid, ⁶​right_claw_length\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  },
  {
    "objectID": "data_tidying.html#organising-variables-columns",
    "href": "data_tidying.html#organising-variables-columns",
    "title": "Data tidying",
    "section": "Organising variables (columns)",
    "text": "Organising variables (columns)\nAn important part of the tidying up process is getting the data in a format that is as intuitive as possible for us. With regards to the existing columns in the crabs01 data set, there are two things we can further improve:\n\nRemove spurious columns, i.e. columns that do not contribute with useful information for our analysis.\nReorder the columns, such that we start with slow-varying columns and end with rapid-varying columns.\n\n\nExercise 2.4\n\nRemove the column id from the crabs01 data set. This identifier was created by the the two teams to keep track of each of crab in each quadrat. But it adds no extra information for us, so we can safely drop it. You can use the function dplyr::select() to keep, but also, to drop columns.\nRecognise that there are three groups of variables (columns):\n\nContextual:\n\nregion\nseason\nquadrat\nlatitude\nlongitude\n\nDemographics:\n\nspecies\nsex\nstage\nis_gravid\n\nMorphological:\n\ncarapace_width\ncarapace_length\nfront_width\nleft_claw_length\nright_claw_length\n\n\nAnd re-arrange these columns in this order. You can use the function dplyr::relocate(). Name the resulting data set crabs02.\n\n\n\nSolution to Exercise 2.4\ncrabs02 <-\n  crabs01 %>%\n  dplyr::select(-\"id\") %>%\n  dplyr::relocate(\n    region,\n    season,\n    quadrat,\n    latitude,\n    longitude,\n    species,\n    sex,\n    stage,\n    is_gravid,\n    carapace_width,\n    carapace_length,\n    front_width,\n    left_claw_length,\n    right_claw_length\n  )\n\n\nHere is how the crabs02 data set should look like:\n\ndplyr::glimpse(crabs02)\n\nRows: 7,326\nColumns: 14\n$ region            <chr> \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", \"Ria Fo…\n$ season            <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"s…\n$ quadrat           <chr> \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\"…\n$ latitude          <dbl> 37.02606, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ longitude         <dbl> -8.01873, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ species           <chr> \"A. farensis\", \"A. farensis\", \"A. farensis\", \"A. far…\n$ sex               <chr> \"?\", \"?\", \"female\", \"male or female\", \"female\", \"fem…\n$ stage             <chr> \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", \"juv…\n$ is_gravid         <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ carapace_width    <dbl> 27, 27, 19, 26, 24, 22, 25, 18, 24, 24, 21, 25, 27, …\n$ carapace_length   <dbl> 21, 21, 15, 21, 19, 17, 19, 14, 19, 19, 17, 20, 22, …\n$ front_width       <dbl> 15, 16, 10, 19, 14, 15, 15, 8, 11, 19, 8, 18, 15, 11…\n$ left_claw_length  <dbl> 16, 13, 9, 16, 8, 7, 14, 13, 10, 12, 8, 16, 13, 9, 8…\n$ right_claw_length <dbl> 10, 15, 5, 14, 7, 6, 9, 5, 10, 12, 13, 15, 11, 10, 6…"
  },
  {
    "objectID": "data_tidying.html#filling-in-fake-missing-values",
    "href": "data_tidying.html#filling-in-fake-missing-values",
    "title": "Data tidying",
    "section": "Filling in fake missing values",
    "text": "Filling in fake missing values\nNow let us start looking into the values of variables, and try to spot strange patterns or weird values.\nLook at the columns latitude and longitude. It seems that there are a lot of missing values (NA) and they all seem to be associated with Ria Formosa.\nLet us use the function dplyr::count() to count how many observations are there for a specific combination of variables. Let’s try the columns region, quadrat, and latitude and longitude:\n\ncount(crabs02, region, quadrat, latitude, longitude)\n\n# A tibble: 6 × 5\n  region       quadrat latitude longitude     n\n  <chr>        <chr>      <dbl>     <dbl> <int>\n1 Ria de Alvor q1          37.1     -8.60  2077\n2 Ria de Alvor q2          37.1     -8.62  1618\n3 Ria Formosa  q1          37.0     -8.02     2\n4 Ria Formosa  q1          NA       NA     1483\n5 Ria Formosa  q2          37.0     -7.99     2\n6 Ria Formosa  q2          NA       NA     2144\n\n\nLet us look again at the first observations of crabs02. We will select a few columns, and slice a few rows for readability:\n\ncrabs02 %>%\n  dplyr::select(region, quadrat, latitude, longitude) %>%\n  dplyr::slice(1:5)\n\n# A tibble: 5 × 4\n  region      quadrat latitude longitude\n  <chr>       <chr>      <dbl>     <dbl>\n1 Ria Formosa q1          37.0     -8.02\n2 Ria Formosa q1          NA       NA   \n3 Ria Formosa q1          NA       NA   \n4 Ria Formosa q1          NA       NA   \n5 Ria Formosa q1          NA       NA   \n\n\nIt seems that the team of biologists at Ria Formosa did not record the latitude and longitude for all the observations except the first. Let’s now see if this is happening for each group of observations defined by the combination of region-quadrat:\n\ncrabs02 %>%\n  dplyr::filter(region == \"Ria Formosa\") %>%\n  dplyr::select(region, quadrat, latitude, longitude) %>%\n  dplyr::group_by(region, quadrat) %>%\n  dplyr::slice(1:3)\n\n# A tibble: 6 × 4\n# Groups:   region, quadrat [2]\n  region      quadrat latitude longitude\n  <chr>       <chr>      <dbl>     <dbl>\n1 Ria Formosa q1          37.0     -8.02\n2 Ria Formosa q1          NA       NA   \n3 Ria Formosa q1          NA       NA   \n4 Ria Formosa q2          37.0     -7.99\n5 Ria Formosa q2          NA       NA   \n6 Ria Formosa q2          NA       NA   \n\n\nSo, these are not truly missing values. These are just values that are absent because the team decided not to record them as they are all the same until the quadrat changes. To fix this, we will need to fill in the values.\n\nExercise 2.5\nUse the function tidyr::fill() to fill in the values. Look at the documentation of this function or in the {tidyr} cheatsheet for how to use it.\n\n\nSolution to Exercise 2.5\ncrabs03 <- tidyr::fill(data = crabs02, latitude, longitude, .direction = \"down\")"
  },
  {
    "objectID": "data_tidying.html#recode-na-aliases",
    "href": "data_tidying.html#recode-na-aliases",
    "title": "Data tidying",
    "section": "Recode NA aliases",
    "text": "Recode NA aliases\nSometimes the values used to represent missing values may take many different forms. Take a close look at the column sex, and check if there are any other values than \"female\" or \"male\".\n\nExercise 2.6\nDetect NA aliases used by the researchers to mean missingness or uncertainty regarding the sex of the crabs, and recode them to R’s appropriate value, i.e. the NA value.\n\nTip: use the unique(crabs03$sex) to see all unique values in that column. Then use a combination of dplyr::mutate(), dplyr::if_else() and the operator %in% to re-create the sex column with all missing values recoded to NA.\n\n\n\nSolution to Exercise 2.6\n# These `sex_na_aliases` were inferred after running `unique(crabs03$sex)`\nsex_na_aliases <- c(\"?\", \"male or female\", \"-\", \" \", \"N/R\")\ncrabs04 <-\n  crabs03 %>%\n  mutate(sex = if_else(sex %in% sex_na_aliases, NA_character_, sex))\n\n\nCompare the values in the sex column before and after the recoding:\n\n# Before the recoding\nunique(crabs03$sex)\n\n[1] \"?\"              \"female\"         \"male or female\" NA              \n[5] \"-\"              \"N/R\"            \"male\"          \n\n# After the recoding\nunique(crabs04$sex)\n\n[1] NA       \"female\" \"male\""
  },
  {
    "objectID": "data_tidying.html#general-recoding-of-values",
    "href": "data_tidying.html#general-recoding-of-values",
    "title": "Data tidying",
    "section": "General recoding of values",
    "text": "General recoding of values\nAs it turns out, the differences between the data sets generated at Ria Formosa and at Ria de Alvor are not exhausted yet… It seems that the variables species and stage are also not agreeing between the two Rias. Let us use dplyr::count() to see that:\n\ndplyr::count(crabs04, region, species, stage)\n\n# A tibble: 20 × 4\n   region       species           stage           n\n   <chr>        <chr>             <chr>       <int>\n 1 Ria de Alvor Afruca farensis   a             464\n 2 Ria de Alvor Afruca farensis   j             130\n 3 Ria de Alvor Afruca farensis   p             130\n 4 Ria de Alvor Afruca farensis   s             346\n 5 Ria de Alvor Uca olhanensis    a             641\n 6 Ria de Alvor Uca olhanensis    j             228\n 7 Ria de Alvor Uca olhanensis    p             252\n 8 Ria de Alvor Uca olhanensis    s             438\n 9 Ria de Alvor Ucides alvorensis a             466\n10 Ria de Alvor Ucides alvorensis j             128\n11 Ria de Alvor Ucides alvorensis p             128\n12 Ria de Alvor Ucides alvorensis s             344\n13 Ria Formosa  A. farensis       adult         624\n14 Ria Formosa  A. farensis       juvenile      178\n15 Ria Formosa  A. farensis       pre_puberty   178\n16 Ria Formosa  A. farensis       sub_adult     470\n17 Ria Formosa  U. olhanensis     adult         881\n18 Ria Formosa  U. olhanensis     juvenile      330\n19 Ria Formosa  U. olhanensis     pre_puberty   354\n20 Ria Formosa  U. olhanensis     sub_adult     616\n\n\nThe team at Ria de Alvor abbreviated the names of the developmental stages, and the team at Ria Formosa seems to have abbreviated the species names. This problematic, we need to recode them.\n\nExercise 2.7\nLet us convert everything to full names:\n\n\n\nOld value\nNew value\n\n\n\n\nj\njuvenile\n\n\np\npre_puberty\n\n\ns\nsub_adult\n\n\na\nadult\n\n\nA. farensis\nAfruca farensis\n\n\nU. olhanensis\nUca olhanensis\n\n\n\n\nA combination of dplyr::mutate() and dplyr::recode() will be helpful.\n\n\n\nSolution to Exercise 2.7\ncrabs05 <-\n  crabs04 %>%\n  dplyr::mutate(\n    species = dplyr::recode(\n      species,\n      `A. farensis` = \"Afruca farensis\",\n      `U. olhanensis` = \"Uca olhanensis\"),\n    stage = dplyr::recode(\n      stage,\n      `j` = \"juvenile\",\n      `p` = \"pre_puberty\",\n      `s` = \"sub_adult\",\n      `a` = \"adult\"\n    ),\n    quadrat = substr(quadrat, 2, 2)\n  )\n\n\nThe new data set should now show:\n\ndplyr::count(crabs05, region, species, stage)\n\n# A tibble: 20 × 4\n   region       species           stage           n\n   <chr>        <chr>             <chr>       <int>\n 1 Ria de Alvor Afruca farensis   adult         464\n 2 Ria de Alvor Afruca farensis   juvenile      130\n 3 Ria de Alvor Afruca farensis   pre_puberty   130\n 4 Ria de Alvor Afruca farensis   sub_adult     346\n 5 Ria de Alvor Uca olhanensis    adult         641\n 6 Ria de Alvor Uca olhanensis    juvenile      228\n 7 Ria de Alvor Uca olhanensis    pre_puberty   252\n 8 Ria de Alvor Uca olhanensis    sub_adult     438\n 9 Ria de Alvor Ucides alvorensis adult         466\n10 Ria de Alvor Ucides alvorensis juvenile      128\n11 Ria de Alvor Ucides alvorensis pre_puberty   128\n12 Ria de Alvor Ucides alvorensis sub_adult     344\n13 Ria Formosa  Afruca farensis   adult         624\n14 Ria Formosa  Afruca farensis   juvenile      178\n15 Ria Formosa  Afruca farensis   pre_puberty   178\n16 Ria Formosa  Afruca farensis   sub_adult     470\n17 Ria Formosa  Uca olhanensis    adult         881\n18 Ria Formosa  Uca olhanensis    juvenile      330\n19 Ria Formosa  Uca olhanensis    pre_puberty   354\n20 Ria Formosa  Uca olhanensis    sub_adult     616"
  },
  {
    "objectID": "data_tidying.html#fix-scale-of-quantitative-variables",
    "href": "data_tidying.html#fix-scale-of-quantitative-variables",
    "title": "Data tidying",
    "section": "Fix scale of quantitative variables",
    "text": "Fix scale of quantitative variables\nThe Ria de Alvor team recorded the morphological measurements in centimetres, whereas the Ria Formosa team recorded them in millimetres. We need to fix this.\n\nExercise 2.8\nMultiply the values of the morphological variables of Ria de Alvor by 10 to transform from centimetres to millimetres, and hence harmonise them with Ria Formosa’s values.\n\n\nSolution to Exercise 2.8\ncrabs06 <-\n  crabs05 %>%\n  dplyr::mutate(\n    carapace_width = if_else(region == \"Ria de Alvor\", carapace_width * 10, carapace_width),\n    carapace_length = if_else(region == \"Ria de Alvor\", carapace_length * 10, carapace_length),\n    front_width = if_else(region == \"Ria de Alvor\", front_width * 10, front_width),\n    left_claw_length = if_else(region == \"Ria de Alvor\", left_claw_length * 10, left_claw_length),\n    right_claw_length = if_else(region == \"Ria de Alvor\", right_claw_length * 10, right_claw_length)\n  )\n\n\nCompare the summary statistics before and after the transformation. Here is an example with carapace_width:\n\n# Before multiplication by 10\nsummary(crabs05$carapace_width)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    4.20   10.80   22.81   36.00  142.00 \n\n\n\n# After multiplication by 10\nsummary(crabs06$carapace_width)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   9.00   26.00   40.00   43.81   56.00  142.00"
  },
  {
    "objectID": "data_tidying.html#ensure-appropriate-variable-types",
    "href": "data_tidying.html#ensure-appropriate-variable-types",
    "title": "Data tidying",
    "section": "Ensure appropriate variable types",
    "text": "Ensure appropriate variable types\nCurrently our data set crabs06 has a range of variables whose type is character, i.e. the individual values are strings. Examples are: region, species, stage, etc.. These are essentially nominal (or categorical), or ordered categorical (or ordinal) variables. In R these variable types are called factors.\nAlthough it is possible to leave these variables as the character type, converting to factors has a few advantages:\n\nMemory efficiency: factors take up less space than character variables, because they are effectively stored as integers.\nFactors are useful when you know the set of possible values but they’re not all present in a given data set. In contrast to a character vector, when you tabulate a factor you’ll get counts of all categories, even unobserved ones.\n\n\nExercise 2.9\nUse a combination of dplyr::mutate() and factor() to convert the following variables to factors:\n\nregion\nseason\nspecies\nsex\nstage\n\nAlso, and because we do not have an integer variable in our crabs06 data set, make the quadrat an integer (for illustrative purposes). Tip: use as.integer() for that.\n\n\nSolution to Exercise 2.9\ncrabs07 <-\n  crabs06 %>%\n  dplyr::mutate(\n    region = factor(region),\n    season = factor(season),\n    quadrat = as.integer(quadrat),\n    species = factor(species),\n    sex = factor(sex, levels = c(\"female\", \"male\")),\n    stage = factor(stage, levels = c(\"juvenile\", \"pre_puberty\", \"sub_adult\", \"adult\"), ordered = TRUE)\n  )"
  },
  {
    "objectID": "data_tidying.html#column-names-are-values-not-variable-names",
    "href": "data_tidying.html#column-names-are-values-not-variable-names",
    "title": "Data tidying",
    "section": "Column names are values, not variable names",
    "text": "Column names are values, not variable names\nRemember the quadrats01 data set about the quadrats? It’s time to update it too. Look at the column names, they’re values! Also, the first column has an automatic name ...1 because originally in the Excel file it was empty.\n\nquadrats01\n\n# A tibble: 1 × 5\n  ...1      `Ria Formosa-q1` `Ria Formosa-q2` `Ria de Alvor-q1` Ria de Alvor-q…¹\n  <chr>                <dbl>            <dbl>             <dbl>            <dbl>\n1 Area (m2)              250              360               260              220\n# … with abbreviated variable name ¹​`Ria de Alvor-q2`\n\n\nTo fix this data set we will use two fancy functions that we haven’t used yet: tidyr::pivot_longer() and tidyr::separate().\n\nExercise 2.10\nConvert the quadrats01 data set into a tidy data set by moving the values in the column names to table elements, and create new columns to accomodate them.\n\n\nSolution to Exercise 2.10\nquadrats02 <-\n  quadrats01 %>%\n  dplyr::select(-1) %>%\n  tidyr::pivot_longer(cols = everything(), names_to = \"region_quadrat\", values_to = \"area\") %>%\n  tidyr::separate(col = \"region_quadrat\", into = c(\"region\", \"quadrat\"), sep = \"-\")\n\n\n\n\nExercise 2.11\nAnd just like we did before, convert the region variable to factor and quadrat to integer and save the result to quadrats03.\n\n\nSolution to Exercise 2.11\nquadrats03 <-\n  quadrats02 %>%\n  dplyr::mutate(\n    region = factor(region),\n    quadrat = as.integer(substr(quadrat, 2, 2))\n  )"
  },
  {
    "objectID": "data_tidying.html#multiple-observational-unit-types-in-one-table",
    "href": "data_tidying.html#multiple-observational-unit-types-in-one-table",
    "title": "Data tidying",
    "section": "Multiple observational unit types in one table",
    "text": "Multiple observational unit types in one table\n\nDatasets often involve values collected at multiple levels, on different types of observational units. During tidying, each type of observational unit should be stored in its own table. This is closely related to the idea of database normalisation, where each fact is expressed in only one place. It’s important because otherwise inconsistencies can arise. From {tidyr}vignette on multiple types\n\nThere are two variables (columns) in our crabs07 data set that characterise the quadrats, not the crabs individually. These are latitude and longitude. Yet, they’ve been recorded in the crabs data sets but belong in the quadrats data set.\n\nExercise 2.12\nTo fix this, we will need to get the unique latitude and longitude values for each quadrat. There is a nifty function that allow us to that: dplyr::distinct(). And combined with dplyr::left_join() will get us there…\n\n\nSolution to Exercise 2.12\nquadrats_coord <- dplyr::distinct(crabs07, region, quadrat, latitude, longitude)\nquadrats04 <- dplyr::left_join(quadrats03, quadrats_coord)\n\n# And now we can drop latitude and longitude from the `crabs07` data set.\n# Note the minus sign behind the vector of column names.\ncrabs08 <- select(crabs07, -c(\"latitude\", \"longitude\"))\n\n\nHere’s how it should like:\n\nquadrats04\n\n# A tibble: 4 × 5\n  region       quadrat  area latitude longitude\n  <fct>          <int> <dbl>    <dbl>     <dbl>\n1 Ria Formosa        1   250     37.0     -8.02\n2 Ria Formosa        2   360     37.0     -7.99\n3 Ria de Alvor       1   260     37.1     -8.60\n4 Ria de Alvor       2   220     37.1     -8.62\n\n\n\ncrabs08\n\n# A tibble: 7,326 × 12\n   region     season quadrat species sex   stage is_gr…¹ carap…² carap…³ front…⁴\n   <fct>      <fct>    <int> <fct>   <fct> <ord> <lgl>     <dbl>   <dbl>   <dbl>\n 1 Ria Formo… summer       1 Afruca… <NA>  juve… FALSE        27      21      15\n 2 Ria Formo… summer       1 Afruca… <NA>  juve… FALSE        27      21      16\n 3 Ria Formo… summer       1 Afruca… fema… juve… TRUE         19      15      10\n 4 Ria Formo… summer       1 Afruca… <NA>  juve… FALSE        26      21      19\n 5 Ria Formo… summer       1 Afruca… fema… juve… FALSE        24      19      14\n 6 Ria Formo… summer       1 Afruca… fema… juve… FALSE        22      17      15\n 7 Ria Formo… summer       1 Afruca… fema… juve… FALSE        25      19      15\n 8 Ria Formo… summer       1 Afruca… fema… juve… FALSE        18      14       8\n 9 Ria Formo… summer       1 Afruca… fema… juve… TRUE         24      19      11\n10 Ria Formo… summer       1 Afruca… fema… juve… FALSE        24      19      19\n# … with 7,316 more rows, 2 more variables: left_claw_length <dbl>,\n#   right_claw_length <dbl>, and abbreviated variable names ¹​is_gravid,\n#   ²​carapace_width, ³​carapace_length, ⁴​front_width\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  },
  {
    "objectID": "data_tidying.html#wrapping-up",
    "href": "data_tidying.html#wrapping-up",
    "title": "Data tidying",
    "section": "Wrapping up",
    "text": "Wrapping up\nFinally we will give simple names to our two data sets and save them to disk to mark this milestone of Data Tidying. These exported files will be the starting point of tomorrow’s workflow about Data Visualisation with {ggplot2}.\n\nExercise 2.13\n\nExport the quadrats data frame to CSV (data-tidy/quadrats.csv)\nExport the crabs data frame to CSV (data-tidy/crabs.csv)\n\nAlthough CSV files are a good way of storing our tidy data sets and of sharing it with collaborators, they do not store information about the variables (columns) types.\nSo please export also to RDS format which is a special format that only R understands but that keeps the data exactly as we have it now, thus making it easier to read in this files and continue with our workflow about Data Visualisation tomorrow.\n\nExport the quadrats data frame to RDS (data-tidy/quadrats.rds)\nExport the crabs data frame to RDS (data-tidy/crabs.rds)\n\n\n\nSolution to Exercise 2.13\n# Assign to new variables with simpler names\nquadrats <- quadrats04\ncrabs <- crabs08\n\n# Export to disk\ndata_tidy_path <- here::here(\"data-tidy\")\nreadr::write_csv(quadrats, file = file.path(data_tidy_path, \"quadrats.csv\"))\nreadr::write_csv(crabs, file = file.path(data_tidy_path, \"crabs.csv\"))\n\nsaveRDS(quadrats, file = file.path(data_tidy_path, \"quadrats.rds\"))\nsaveRDS(crabs, file = file.path(data_tidy_path, \"crabs.rds\"))"
  },
  {
    "objectID": "data_tidying.html#data-tidying-script",
    "href": "data_tidying.html#data-tidying-script",
    "title": "Data tidying",
    "section": "Data tidying script",
    "text": "Data tidying script\nHere is the entire script containing all code from the exercises present in section Raw Data and Data Tidying.\n\n#\n# Raw Data\n#\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(tools)\nlibrary(readxl)\n\n# Define the path to the raw data\ndata_raw_path <- here(\"data-raw\")\n\n# List the raw data files\nlist.files(data_raw_path)\n\n# Reading the four CSV files (Ria Formosa)\nrf_s_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q1.csv\"))\nrf_s_q2 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q2.csv\"))\nrf_w_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_w_q1.csv\"))\nrf_w_q2 <- readr::read_csv(file.path(data_raw_path, \"rf_w_q2.csv\"))\n\n# Reading now the four sheets inside of \"Ria de Alvor.xlsx\"\nra_path <- file.path(data_raw_path, \"Ria de Alvor.xlsx\")\nra_s_q1 <- readxl::read_excel(ra_path, sheet = \"summer-q1\")\nra_s_q2 <- readxl::read_excel(ra_path, sheet = \"summer-q2\")\nra_w_q1 <- readxl::read_excel(ra_path, sheet = \"winter-q1\")\nra_w_q2 <- readxl::read_excel(ra_path, sheet = \"winter-q2\")\n\n# Finally, reading the details about the quadrats\nquadrats01 <- readxl::read_excel(file.path(data_raw_path, \"quadrats.xlsx\"))\n\n# Insights gained: to be discussed with trainers.\n\n\n\n#\n# Data Tidying\n#\n\n# EXERCISE 2.1\n# Ria Formosa data sets\nrf_s_q1_01 <- dplyr::mutate(rf_s_q1, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q1\")\nrf_s_q2_01 <- dplyr::mutate(rf_s_q2, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q2\")\nrf_w_q1_01 <- dplyr::mutate(rf_w_q1, region = \"Ria Formosa\", season = \"winter\", quadrat = \"q1\")\nrf_w_q2_01 <- dplyr::mutate(rf_w_q2, region = \"Ria Formosa\", season = \"winter\", quadrat = \"q2\")\n\n# Ria de Alvor data sets\nra_s_q1_01 <- dplyr::mutate(ra_s_q1, region = \"Ria de Alvor\", season = \"summer\", quadrat = \"q1\")\nra_s_q2_01 <- dplyr::mutate(ra_s_q2, region = \"Ria de Alvor\", season = \"summer\", quadrat = \"q2\")\nra_w_q1_01 <- dplyr::mutate(ra_w_q1, region = \"Ria de Alvor\", season = \"winter\", quadrat = \"q1\")\nra_w_q2_01 <- dplyr::mutate(ra_w_q2, region = \"Ria de Alvor\", season = \"winter\", quadrat = \"q2\")\n\n# EXERCISE 2.2\n# What column names are there in Ria de Alvor and not in Ria Formosa?\nsetdiff(colnames(ra_s_q1_01), colnames(rf_s_q1_01))\n\n# And now the reverse question.\nsetdiff(colnames(rf_s_q1_01), colnames(ra_s_q1_01))\n\n# So it seems Ria de Alvor data sets have named the `species` column as\n# `species_name`, and `is_gravid?` contains a question mark. \n# Let us fix by mapping:\n#  - `species_name` to `species`\n#  - `is_gravid?` to `is_gravid`\n# And also, do not forget to map the abbreviated column names to their full\n# names.\n\n\n# Note how the mapping of the names is indicated in `rename()`:\n# New names go in the left hand side of the equal sign and old names in\n# the right hand side.\n# \n# Ria Formosa data sets\nrf_s_q1_02 <- dplyr::rename(rf_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_s_q2_02 <- dplyr::rename(rf_s_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_w_q1_02 <- dplyr::rename(rf_w_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_w_q2_02 <- dplyr::rename(rf_w_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\n\n# Ria de Alvor data sets\nra_s_q1_02 <- dplyr::rename(ra_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_s_q2_02 <- dplyr::rename(ra_s_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_w_q1_02 <- dplyr::rename(ra_w_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_w_q2_02 <- dplyr::rename(ra_w_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\n\n\n# EXERCISE 2.3\ncrabs01 <-\n  dplyr::bind_rows(\n    rf_s_q1_02,\n    rf_s_q2_02,\n    rf_w_q1_02,\n    rf_w_q2_02,\n    ra_s_q1_02,\n    ra_s_q2_02,\n    ra_w_q1_02,\n    ra_w_q2_02\n  )\n\n\n# EXERCISE 2.4\ncrabs02 <-\n  crabs01 %>%\n  dplyr::select(-\"id\") %>%\n  dplyr::relocate(\n    region,\n    season,\n    quadrat,\n    latitude,\n    longitude,\n    species,\n    sex,\n    stage,\n    is_gravid,\n    carapace_width,\n    carapace_length,\n    front_width,\n    left_claw_length,\n    right_claw_length\n  )\n\n# EXERCISE 2.5\ncrabs03 <- tidyr::fill(data = crabs02, latitude, longitude, .direction = \"down\")\n\n# EXERCISE 2.6\n# These `sex_na_aliases` were inferred after running `unique(crabs03$sex)`\nsex_na_aliases <- c(\"?\", \"male or female\", \"-\", \" \", \"N/R\")\ncrabs04 <-\n  crabs03 %>%\n  mutate(sex = if_else(sex %in% sex_na_aliases, NA_character_, sex))\n\n# EXERCISE 2.7\ncrabs05 <-\n  crabs04 %>%\n  dplyr::mutate(\n    species = dplyr::recode(\n      species,\n      `A. farensis` = \"Afruca farensis\",\n      `U. olhanensis` = \"Uca olhanensis\"),\n    stage = dplyr::recode(\n      stage,\n      `j` = \"juvenile\",\n      `p` = \"pre_puberty\",\n      `s` = \"sub_adult\",\n      `a` = \"adult\"\n    ),\n    quadrat = substr(quadrat, 2, 2)\n  )\n\n# EXERCISE 2.8\ncrabs06 <-\n  crabs05 %>%\n  dplyr::mutate(\n    carapace_width = if_else(region == \"Ria de Alvor\", carapace_width * 10, carapace_width),\n    carapace_length = if_else(region == \"Ria de Alvor\", carapace_length * 10, carapace_length),\n    front_width = if_else(region == \"Ria de Alvor\", front_width * 10, front_width),\n    left_claw_length = if_else(region == \"Ria de Alvor\", left_claw_length * 10, left_claw_length),\n    right_claw_length = if_else(region == \"Ria de Alvor\", right_claw_length * 10, right_claw_length)\n  )\n\n# EXERCISE 2.9\ncrabs07 <-\n  crabs06 %>%\n  dplyr::mutate(\n    region = factor(region),\n    season = factor(season),\n    quadrat = as.integer(quadrat),\n    species = factor(species),\n    sex = factor(sex, levels = c(\"female\", \"male\")),\n    stage = factor(stage, levels = c(\"juvenile\", \"pre_puberty\", \"sub_adult\", \"adult\"), ordered = TRUE)\n  )\n\n# EXERCISE 2.10\nquadrats02 <-\n  quadrats01 %>%\n  dplyr::select(-1) %>%\n  tidyr::pivot_longer(cols = everything(), names_to = \"region_quadrat\", values_to = \"area\") %>%\n  tidyr::separate(col = \"region_quadrat\", into = c(\"region\", \"quadrat\"), sep = \"-\")\n\n# EXERCISE 2.11\nquadrats03 <-\n  quadrats02 %>%\n  dplyr::mutate(\n    region = factor(region),\n    quadrat = as.integer(substr(quadrat, 2, 2))\n  )\n\n# EXERCISE 2.12\nquadrats_coord <- dplyr::distinct(crabs07, region, quadrat, latitude, longitude)\nquadrats04 <- dplyr::left_join(quadrats03, quadrats_coord)\n\n# And now we can drop latitude and longitude from the `crabs07` data set.\n# Note the minus sign behind the vector of column names.\ncrabs08 <- select(crabs07, -c(\"latitude\", \"longitude\"))\n\n# EXERCISE 2.13\n# Assign to new variables with simpler names\nquadrats <- quadrats04\ncrabs <- crabs08\n\n# Export to disk\ndata_tidy_path <- here::here(\"data-tidy\")\nreadr::write_csv(quadrats, file = file.path(data_tidy_path, \"quadrats.csv\"))\nreadr::write_csv(crabs, file = file.path(data_tidy_path, \"crabs.csv\"))\n\nsaveRDS(quadrats, file = file.path(data_tidy_path, \"quadrats.rds\"))\nsaveRDS(crabs, file = file.path(data_tidy_path, \"crabs.rds\"))"
  }
]