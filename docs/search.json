[
  {
    "objectID": "requirements.html",
    "href": "requirements.html",
    "title": "Requirements",
    "section": "",
    "text": "Bring your own laptop computer with R and RStudio installed.\nHave a basic understanding of R programming. If you need to brush up on your R skills, a hands-on R introductory tutorial will be made available for self-learning so that you can get familiarized with basic R before the course."
  },
  {
    "objectID": "data_tidying.html",
    "href": "data_tidying.html",
    "title": "Data tidying",
    "section": "",
    "text": "Introduction\nWe will now embark on a series of data transformations to convert our nine data sets into only two tidy data sets:\n\ncrabs\nquadrats\n\nSo bear these two data sets in mind as these are our end goal for the Data Tidying workflow of today.\nFrom the previous section Raw Data you should have generated these nine data sets that are now our starting point:\n\nRia Formosa\n\nrf_s_q1\nrf_s_q2\nrf_w_q1\nrf_w_q2\n\nRia de Alvor\n\nra_s_q1\nra_s_q2\nra_w_q1\nra_w_q2\n\nQuadrats\n\nquadrats01\n\n\n\n\nAdd missing columns\nCurrently, the fiddler crabs data is missing three variables:\n\nregion\nseason\nquadrat\n\nThese variables were surreptitiously present in the names of the CSV files and in the name of the XLSX and included sheets.\n\nAn an example, the file rf_s_q1.csv, whose data has been read into rf_s_q1, indicates in its name that crab sampling was performed in Ria Formosa (\"rf\"), in the Summer (\"s\"), in quadrat 1 (\"q1\").\n\n\n\nExercise 2.1\nUse the function dplyr::mutate() to add the three missing columns, and respective values, to each of the eight data frames:\n\nRia Formosa\n\nrf_s_q1\nrf_s_q2\nrf_w_q1\nrf_w_q2\n\nRia de Alvor\n\nra_s_q1\nra_s_q2\nra_w_q1\nra_w_q2\n\n\nHere is an example for the data set rf_s_q1:\n\n# Add the columns `region`, `season` and `quadrat`.\nrf_s_q1_01 <- dplyr::mutate(rf_s_q1, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q1\")\n\n# Check the result.\ndplyr::glimpse(rf_s_q1_01)\n\nRows: 1,243\nColumns: 15\n$ cl        <dbl> 21, 21, 15, 21, 19, 17, 19, 14, 19, 19, 17, 20, 22, 15, 17, …\n$ lcl       <dbl> 16, 13, 9, 16, 8, 7, 14, 13, 10, 12, 8, 16, 13, 9, 8, 19, 13…\n$ fw        <dbl> 15, 16, 10, 19, 14, 15, 15, 8, 11, 19, 8, 18, 15, 11, 13, 15…\n$ species   <chr> \"A. farensis\", \"A. farensis\", \"A. farensis\", \"A. farensis\", …\n$ longitude <dbl> -8.01873, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ is_gravid <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE,…\n$ rcl       <dbl> 10, 15, 5, 14, 7, 6, 9, 5, 10, 12, 13, 15, 11, 10, 6, 16, 12…\n$ stage     <chr> \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", …\n$ sex       <chr> \"?\", \"?\", \"female\", \"male or female\", \"female\", \"female\", \"f…\n$ id        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ cw        <dbl> 27, 27, 19, 26, 24, 22, 25, 18, 24, 24, 21, 25, 27, 19, 22, …\n$ latitude  <dbl> 37.02606, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ region    <chr> \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", …\n$ season    <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", …\n$ quadrat   <chr> \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", …\n\n\n\n\nSolution to Exercise 2.1\n# Ria Formosa data sets\nrf_s_q1_01 <- dplyr::mutate(rf_s_q1, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q1\")\nrf_s_q2_01 <- dplyr::mutate(rf_s_q2, region = \"Ria Formosa\", season = \"summer\", quadrat = \"q2\")\nrf_w_q1_01 <- dplyr::mutate(rf_w_q1, region = \"Ria Formosa\", season = \"winter\", quadrat = \"q1\")\nrf_w_q2_01 <- dplyr::mutate(rf_w_q2, region = \"Ria Formosa\", season = \"winter\", quadrat = \"q2\")\n\n# Ria de Alvor data sets\nra_s_q1_01 <- dplyr::mutate(ra_s_q1, region = \"Ria de Alvor\", season = \"summer\", quadrat = \"q1\")\nra_s_q2_01 <- dplyr::mutate(ra_s_q2, region = \"Ria de Alvor\", season = \"summer\", quadrat = \"q2\")\nra_w_q1_01 <- dplyr::mutate(ra_w_q1, region = \"Ria de Alvor\", season = \"winter\", quadrat = \"q1\")\nra_w_q2_01 <- dplyr::mutate(ra_w_q2, region = \"Ria de Alvor\", season = \"winter\", quadrat = \"q2\")\n\n\n\n\nMake variable (column) names consistent across data sets\nOkay, now that we have all variables in our data sets, we will need to bind all data sets into one. But before we do that we will need to make sure that the variables (i.e. columns) across the eight data sets are all named in the same way. Otherwise, the step of combining the data sets will be cumbersome. We want it to be smooth. You’ll see in a bit what we mean.\nWe can tell you that there are discrepancies between the data sets coming from Ria Formosa and Ria de Alvor. This is because the two teams of marine biologists had different ideas on how to name two of the variables.\nAlso, the two teams had abbreviated the name of the morphological variables, and we find them hard to read, so we will rename them to new names as indicated in this table:\n\n\n\n\n\n\n\n\nCurrent name\nNew name\nMeaning\n\n\n\n\ncw\ncarapace_width\nCarapace width\n\n\ncl\ncarapace_length\nCarapace length\n\n\nfw\nfront_width\nFront width (distance between the crab eye stalks)\n\n\nlcl\nleft_claw_length\nLeft claw length\n\n\nrcl\nright_claw_length\nRight claw length\n\n\n\n\n\nExercise 2.2\n\nIdentify the two columns that have slightly different names between the Ria Formosa and the Ria de Alvor data sets.\nRename those two columns in the Ria de Alvor data sets (ra_s_q1_01, ra_s_q2_01, ra_w_q1_01 and ra_w_q2_01) to match the names used in Ria Formosa.\nRename the abbreviated column names to new, more explicit, names, as indicated in the table above. Do this for all data sets.\nName these new data sets as: rf_s_q1_02, rf_s_q2_02, etc. and ra_s_q1_02, ra_s_q2_02, etc..\n\nUse the function dplyr::rename() for renaming. Here is an example:\n\nrf_s_q1_02 <- dplyr::rename(rf_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\n\ndplyr::glimpse(rf_s_q1_02)\n\nRows: 1,243\nColumns: 15\n$ carapace_length   <dbl> 21, 21, 15, 21, 19, 17, 19, 14, 19, 19, 17, 20, 22, …\n$ left_claw_length  <dbl> 16, 13, 9, 16, 8, 7, 14, 13, 10, 12, 8, 16, 13, 9, 8…\n$ front_width       <dbl> 15, 16, 10, 19, 14, 15, 15, 8, 11, 19, 8, 18, 15, 11…\n$ species           <chr> \"A. farensis\", \"A. farensis\", \"A. farensis\", \"A. far…\n$ longitude         <dbl> -8.01873, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ is_gravid         <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ right_claw_length <dbl> 10, 15, 5, 14, 7, 6, 9, 5, 10, 12, 13, 15, 11, 10, 6…\n$ stage             <chr> \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", \"juv…\n$ sex               <chr> \"?\", \"?\", \"female\", \"male or female\", \"female\", \"fem…\n$ id                <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ carapace_width    <dbl> 27, 27, 19, 26, 24, 22, 25, 18, 24, 24, 21, 25, 27, …\n$ latitude          <dbl> 37.02606, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ region            <chr> \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", \"Ria Fo…\n$ season            <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"s…\n$ quadrat           <chr> \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\"…\n\n\n\n\nSolution to Exercise 2.2\n# What column names are there in Ria de Alvor and not in Ria Formosa?\nsetdiff(colnames(ra_s_q1_01), colnames(rf_s_q1_01))\n\n# And now the reverse question.\nsetdiff(colnames(rf_s_q1_01), colnames(ra_s_q1_01))\n\n# So it seems Ria de Alvor data sets have named the `species` column as\n# `species_name`, and `is_gravid?` contains a question mark. \n# Let us fix by mapping:\n#  - `species_name` to `species`\n#  - `is_gravid?` to `is_gravid`\n# And also, do not forget to map the abbreviated column names to their full\n# names.\n\n\n# Note how the mapping of the names is indicated in `rename()`:\n# New names go in the left hand side of the equal sign and old names in\n# the right hand side.\n# \n# Ria Formosa data sets\nrf_s_q1_02 <- dplyr::rename(rf_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_s_q2_02 <- dplyr::rename(rf_s_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_w_q1_02 <- dplyr::rename(rf_w_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\nrf_w_q2_02 <- dplyr::rename(rf_w_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw)\n\n# Ria de Alvor data sets\nra_s_q1_02 <- dplyr::rename(ra_s_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_s_q2_02 <- dplyr::rename(ra_s_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_w_q1_02 <- dplyr::rename(ra_w_q1_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\nra_w_q2_02 <- dplyr::rename(ra_w_q2_01, carapace_width = cw, carapace_length = cl, left_claw_length = lcl, right_claw_length = rcl, front_width = fw, species = species_name, is_gravid = `is_gravid?`)\n\n\n\n\nCombining the crabs data sets into one\nNow we will combine all the eight data sets into one single data frame. To do that we use the function dplyr::bind_rows(). And although the columns are not by the same order in all data sets, bind_rows() is smart enough to match each column of one data set to that of another. It does this by using the column names. And that is why it was so important harmonise the column names across data sets.\n\n\nExercise 2.3\nBind all the eight data sets into one named crabs01. Note the number of rows and columns of this new data set.\n\n\nSolution to Exercise 2.3\ncrabs01 <-\n  dplyr::bind_rows(\n    rf_s_q1_02,\n    rf_s_q2_02,\n    rf_w_q1_02,\n    rf_w_q2_02,\n    ra_s_q1_02,\n    ra_s_q2_02,\n    ra_w_q1_02,\n    ra_w_q2_02\n  )\n\n\nHere is how the crabs01 should look like:\n\ncrabs01\n\n# A tibble: 7,326 × 15\n   carapace_…¹ left_…² front…³ species longi…⁴ is_gr…⁵ right…⁶ stage sex      id\n         <dbl>   <dbl>   <dbl> <chr>     <dbl> <lgl>     <dbl> <chr> <chr> <dbl>\n 1          21      16      15 A. far…   -8.02 FALSE        10 juve… ?         1\n 2          21      13      16 A. far…   NA    FALSE        15 juve… ?         2\n 3          15       9      10 A. far…   NA    TRUE          5 juve… fema…     3\n 4          21      16      19 A. far…   NA    FALSE        14 juve… male…     4\n 5          19       8      14 A. far…   NA    FALSE         7 juve… fema…     5\n 6          17       7      15 A. far…   NA    FALSE         6 juve… fema…     6\n 7          19      14      15 A. far…   NA    FALSE         9 juve… fema…     7\n 8          14      13       8 A. far…   NA    FALSE         5 juve… fema…     8\n 9          19      10      11 A. far…   NA    TRUE         10 juve… fema…     9\n10          19      12      19 A. far…   NA    FALSE        12 juve… fema…    10\n# … with 7,316 more rows, 5 more variables: carapace_width <dbl>,\n#   latitude <dbl>, region <chr>, season <chr>, quadrat <chr>, and abbreviated\n#   variable names ¹​carapace_length, ²​left_claw_length, ³​front_width,\n#   ⁴​longitude, ⁵​is_gravid, ⁶​right_claw_length\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\n\n\nOrganising variables (columns)\nAn important part of the tidying up process is getting the data in a format that is as intuitive as possible for us. With regards to the existing columns in the crabs01 data set, there are two things we can further improve:\n\nRemove spurious columns, i.e. columns that do not contribute with useful information for our analysis.\nReorder the columns, such that we start with slow-varying columns and end with rapid-varying columns.\n\n\n\nExercise 2.4\n\nRemove the column id from the crabs01 data set. This identifier was created by the the two teams to keep track of each of crab in each quadrat. But it adds no extra information for us, so we can safely drop it. You can use the function dplyr::select() to keep, but also, to drop columns.\nRecognise that there are three groups of variables (columns):\n\nContextual:\n\nregion\nseason\nquadrat\nlatitude\nlongitude\n\nDemographics:\n\nspecies\nsex\nstage\nis_gravid\n\nMorphological:\n\ncarapace_width\ncarapace_length\nfront_width\nleft_claw_length\nright_claw_length\n\n\nAnd re-arrange these columns in this order. You can use the function dplyr::relocate(). Name the resulting data set crabs02.\n\n\n\nSolution to Exercise 2.4\ncrabs02 <-\n  crabs01 %>%\n  dplyr::select(-\"id\") %>%\n  dplyr::relocate(\n    region,\n    season,\n    quadrat,\n    latitude,\n    longitude,\n    species,\n    sex,\n    stage,\n    is_gravid,\n    carapace_width,\n    carapace_length,\n    front_width,\n    left_claw_length,\n    right_claw_length\n  )\n\n\nHere is how the crabs02 data set should look like:\n\ndplyr::glimpse(crabs02)\n\nRows: 7,326\nColumns: 14\n$ region            <chr> \"Ria Formosa\", \"Ria Formosa\", \"Ria Formosa\", \"Ria Fo…\n$ season            <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"s…\n$ quadrat           <chr> \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\", \"q1\"…\n$ latitude          <dbl> 37.02606, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ longitude         <dbl> -8.01873, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ species           <chr> \"A. farensis\", \"A. farensis\", \"A. farensis\", \"A. far…\n$ sex               <chr> \"?\", \"?\", \"female\", \"male or female\", \"female\", \"fem…\n$ stage             <chr> \"juvenile\", \"juvenile\", \"juvenile\", \"juvenile\", \"juv…\n$ is_gravid         <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ carapace_width    <dbl> 27, 27, 19, 26, 24, 22, 25, 18, 24, 24, 21, 25, 27, …\n$ carapace_length   <dbl> 21, 21, 15, 21, 19, 17, 19, 14, 19, 19, 17, 20, 22, …\n$ front_width       <dbl> 15, 16, 10, 19, 14, 15, 15, 8, 11, 19, 8, 18, 15, 11…\n$ left_claw_length  <dbl> 16, 13, 9, 16, 8, 7, 14, 13, 10, 12, 8, 16, 13, 9, 8…\n$ right_claw_length <dbl> 10, 15, 5, 14, 7, 6, 9, 5, 10, 12, 13, 15, 11, 10, 6…"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Overview",
    "section": "",
    "text": "In research, a significant amount of effort is spent cleaning data to get it ready for visualisation and analysis. This course will teach you how to convert your messy dataset into tidy data using R for easy data visual exploration and analysis.\nFor this, you will be introduced to the concept of tidy data, and guided through the programmatic steps in R required to structure datasets according to its principles. Additionally, we will show how tidy data works well together with graphical functions of the R package {ggplot2} thus facilitating initial exploration and analysis of the data. Finally, a “bring-your-own-data day” (optional day 3) will allow a smaller group of participants to obtain individual feedback and consulting on how to tidy up and visually inspect their own research datasets."
  },
  {
    "objectID": "about.html#programme",
    "href": "about.html#programme",
    "title": "Overview",
    "section": "Programme",
    "text": "Programme\n\nDay 1 | Introduction to data wrangling\n\nRaw and processed data\nComponents of tidy data\nMessy datasets\nConverting messy data to tidy data using tidyverse packages\nHands-on exercises.\n\n\n\nDay 2 | Visualising tidy data using ggplot2\n\nUnderstanding how tidy data translates to graphics’ aesthestics\nPlotting with one geom\nCombining several geoms\nTheming\nSaving graphs\nHands-on exercises.\n\n\n\nDay 3 | Bring your own data day\nIndividual consulting for data wrangling and visual exploration."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tidy Data & Visualisation in R",
    "section": "",
    "text": "The course consists of two days, and an extra optional day of consulting with students’ own data. In the first day you will learn the fundamental ideas behind tidy data and how to use Tidyverse functionality to turn your messy data into tidy data. In the second day you’ll learn how to use {ggplot2} functions to turn your tidy dataset into charts and figures.\nTo follow the course narrative browse the sections indicated on the left side bar of this website and do the exercises indicated.\nThis training is designed to be an in-person course, but the course materials are provided for free, in the open, for the benefit of the community. If you use these materials please give the credit: DOIXXX CC BY SA."
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Finally, ensure that you have the following packages installed by running:\ninstall.packages(c(\"tidyverse\", \"here\", \"readxl\", \"ggbeeswarm\"))\nYou can now move on to the next section."
  },
  {
    "objectID": "raw_data.html",
    "href": "raw_data.html",
    "title": "Raw data",
    "section": "",
    "text": "First acquaintances\nStart by loading the following required packages:\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(tools)\nlibrary(readxl)\n\nGet a variable with the path to the directory containing the raw data files:\n\ndata_raw_path <- here(\"data-raw\")\ndata_raw_path\n\n[1] \"/home/rmagno/sci/code/R/web/tdvr.oct.22/data-raw\"\n\n\nNote that the path up to data-raw/ is different from the one shown here. This is the job of the function here(): automatically determines the path of your data-raw directory. Now list the files in data-raw/:\n\nlist.files(data_raw_path)\n\n[1] \"quadrats.xlsx\"     \"rf_s_q1.csv\"       \"rf_s_q2.csv\"      \n[4] \"rf_w_q1.csv\"       \"rf_w_q2.csv\"       \"Ria de Alvor.xlsx\"\n\n\nThere are four CSV files (rf_s_q1.csv, rf_s_q2.csv, rf_w_q1.csv, rf_w_q2.csv) and two Excel files (quadrats.xlsx, Ria de Alvor.xlsx). The CSV files contain data on the fiddler crabs sampled during the four field trips to Ria Formosa. The analogous data for Ria de Alvor is provided in the Excel file Ria de Alvor.xlsx. The file quadrats.xlsx contains the area for each of quadrats defined in both Ria Formosa and Ria de Alvor.\nUse Excel to visually inspect the data in Ria de Alvor.xlsx, in one of the CSV files of your choice, and in quadrats.xlsx. Take some quick notes of:\n\nHow many data sets are there?\nWhat is the observational unit in each data set?\nWhat are the variables? Are the variable names used consistently across the data sets from Ria Formosa (CSV files) and Ria de Alvor (Ria de Alvor.xlsx)?\nBy looking at the values of the variables can you tell the type of variable? I.e., is it categorical/nominal, ordinal, binary, or continuous? Are there invalid or unexpected values?\n\n\n\nExercise 1.1\nCollect the previous commands into your R script.\n\n\nSolution to Exercise 1.1\nlibrary(tidyverse)\nlibrary(here)\nlibrary(tools)\nlibrary(readxl)\n\n# Define the path to the raw data\ndata_raw_path <- here(\"data-raw\")\n\n# List the raw data files\nlist.files(data_raw_path)\n\n\n\n\nProgrammatic acquaintances\nWe will now read the data into R, and try to answer the same questions but using R code. Here’s how you may read one of the CSV files using the read_csv() function:\n\nrf_s_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q1.csv\"))\n\nAnd here is how you read the quadrats.xlsx into R:\n\nquadrats01 <- readxl::read_excel(file.path(data_raw_path, \"quadrats.xlsx\"))\n\n\n\nExercise 1.2\nFollowing those examples can you read all six files into R?\n\n\nSolution to Exercise 1.2\n# Reading the four CSV files (Ria Formosa)\nrf_s_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q1.csv\"))\nrf_s_q2 <- readr::read_csv(file.path(data_raw_path, \"rf_s_q2.csv\"))\nrf_w_q1 <- readr::read_csv(file.path(data_raw_path, \"rf_w_q1.csv\"))\nrf_w_q2 <- readr::read_csv(file.path(data_raw_path, \"rf_w_q2.csv\"))\n\n# Reading now the four sheets inside of \"Ria de Alvor.xlsx\"\nra_path <- file.path(data_raw_path, \"Ria de Alvor.xlsx\")\nra_s_q1 <- readxl::read_excel(ra_path, sheet = \"summer-q1\")\nra_s_q2 <- readxl::read_excel(ra_path, sheet = \"summer-q2\")\nra_w_q1 <- readxl::read_excel(ra_path, sheet = \"winter-q1\")\nra_w_q2 <- readxl::read_excel(ra_path, sheet = \"winter-q2\")\n\n# Finally, reading the details about the quadrats\nquadrats01 <- readxl::read_excel(file.path(data_raw_path, \"quadrats.xlsx\"))\n\n\n\n\nExercise 1.3\nTo inspect the data just loaded into R we may try the following functions on those objects:\n\nView()\ndplyr::glimpse()\ncolnames()\nnrow() and ncol()\nhead() and tail()\nsummary() and table()\nunique()\n\nHere are a few examples:\n\n# Print each column as a row and indicate the column name,\n# followed by its type, and the first values:\ndplyr::glimpse(rf_s_q1)\n\n# Column names of the data frame `rf_s_q1`:\ncolnames(rf_s_q1)\n\n# Create a contingency table of the column `stage`:\ntable(rf_s_q1$stage)\n\n# Show me the unique values present in the `sex` column:\nunique(rf_s_q1$sex)\n\nWrite down as comments the insights you gained about the data:\n\n\nSolution to Exercise 1.3\n# Insights gained:\n# - `region` and `season` are missing variables from the data sets pertaining\n#   Ria Formosa. They are implictly indicated in the name of the CSV files. The \"rf\" and\n#   the \"s\" or \"w\", meant \"summer\" and \"winter, respectively. So we will need\n#   to add these two variables to `rf_s_q1`, `rf_s_q2`, `rf_w_q1` and `rf_w_q2`.\n# -"
  },
  {
    "objectID": "trainers.html",
    "href": "trainers.html",
    "title": "Trainers",
    "section": "",
    "text": "Ramiro Magno Isabel Duarte Bruno Louro João Brazão"
  },
  {
    "objectID": "data_visualisation.html",
    "href": "data_visualisation.html",
    "title": "Data visualisation",
    "section": "",
    "text": "Coming soon."
  }
]